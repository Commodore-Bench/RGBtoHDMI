Sections:
00: ".text" (0-276)


Source: "videocore.s"
                            	     1: #-------------------------------------------------------------------------
                            	     2: # VideoCore IV implementation of RGBtoHDMI
                            	     3: # (c) IanB Nov 2021
                            	     4: #-------------------------------------------------------------------------
                            	     5: 
                            	     6: # GPIO registers
                            	     7: 
                            	     8: .equ GPU_COMMAND,          0x7e0000a0  #use MBOX0-MBOX7 for ARM communications
                            	     9: .equ GPU_DATA_BUFFER_0,    0x7e0000a4
                            	    10: .equ GPU_DATA_BUFFER_1,    0x7e0000a8
                            	    11: .equ GPU_DATA_BUFFER_2,    0x7e0000ac
                            	    12: .equ GPU_SYNC,             0x7e0000b0  #gap in data block to allow fast 3 register read on ARM side
                            	    13: .equ GPU_DATA_BUFFER_3,    0x7e0000b4  #using a single ldr and a two register ldmia
                            	    14: .equ GPU_DATA_BUFFER_4,    0x7e0000b8  #can't use more than a single unaligned two register ldmia
                            	    15: .equ GPU_DATA_BUFFER_5,    0x7e0000bc  #on the peripherals and an aligned ldmia won't work
                            	    16: 
                            	    17: .equ GPU_COMMAND_offset,   0
                            	    18: .equ DATA_BUFFER_0_offset, 4
                            	    19: .equ DATA_BUFFER_1_offset, 8
                            	    20: .equ DATA_BUFFER_2_offset, 12
                            	    21: .equ GPU_SYNC_offset,      16
                            	    22: .equ DATA_BUFFER_3_offset, 20
                            	    23: .equ DATA_BUFFER_4_offset, 24
                            	    24: .equ DATA_BUFFER_5_offset, 28
                            	    25: 
                            	    26: .equ GPLEV0,          0x7e200034
                            	    27: 
                            	    28: .equ FINAL_BIT,            31             #signal if this sample word is the last
                            	    29: .equ PSYNC_BIT,            17             #alternates on each full 6 word buffer
                            	    30: .equ ODD_EVEN_BIT_HI,      16             #signal if low or high 16 bit sample is to be used
                            	    31: .equ ODD_EVEN_BIT_LO,      0              #signal if low or high 16 bit sample is to be used
                            	    32: .equ DEFAULT_BIT_STATE,    0x00020001     #FINAL_BIT=0, PSYNC_BIT=1, ODD_EVEN_BIT_HI=0, ODD_EVEN_BIT_LO=1
                            	    33: .equ MUX_BIT,              24             #video input on MUX bit for FFOSD
                            	    34: .equ ALT_MUX_BIT,          14             #moved version of MUX bit
                            	    35: .equ SYNC_BIT,             23             #sync input
                            	    36: .equ VIDEO_MASK,           0x3ffc         #12bit GPIO mask
                            	    37: .equ COMMAND_MASK,         0x00000fff     #masks out command bits that trigger sync detection
                            	    38: 
                            	    39: #macros
                            	    40: 
                            	    41: .macro LO_PSYNC_CAPTURE
                            	    42: wait_psync_lo\@:
                            	    43:    ld     r0, (r4)
                            	    44:    btst   r0, PSYNC_BIT
                            	    45:    bne    wait_psync_lo\@
                            	    46:    btst   r0, MUX_BIT
                            	    47:    and    r0, r6
                            	    48:    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
                            	    49:    or     r0, r2           #merge bit state
                            	    50:    sub    r3, 1
                            	    51: .endm
                            	    52: 
                            	    53: .macro HI_PSYNC_CAPTURE
                            	    54: wait_psync_hi\@:
                            	    55:    ld     r1, (r4)
                            	    56:    btst   r1, PSYNC_BIT
                            	    57:    beq    wait_psync_hi\@
                            	    58:    btst   r1, MUX_BIT
                            	    59:    and    r1, r6
                            	    60:    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
                            	    61:    lsl    r1, 16           #merge lo and hi samples
                            	    62:    or     r0, r1
                            	    63:    cmp    r3, 0
                            	    64: .endm
                            	    65: 
                            	    66: .macro EDGE_DETECT
                            	    67: waitPSE\@:
                            	    68:    ld     r0, (r4)
                            	    69:    eor    r0, r2
                            	    70:    btst   r0, PSYNC_BIT
                            	    71:    bne    waitPSE\@
                            	    72:    eor    r0, r2       #restore r0 value
                            	    73:    bchg   r2, PSYNC_BIT
                            	    74: .endm
                            	    75: 
                            	    76: # main code entry point
00:00000000 0500            	    77:    di
00:00000002 106A            	    78:    cmp    r0, 1
00:00000004 8D18            	    79:    bne    not_gpio_read_benchmark
00:00000006 02E8A0860100    	    80:    mov    r2, 100000
00:0000000C 01E83400207E    	    81:    mov    r1, GPLEV0
                            	    82: read_bench_loop:
00:00000012 1308            	    83:    ld     r3, (r1)  #read gpio
00:00000014 1266            	    84:    sub    r2, 1
00:00000016 026A            	    85:    cmp    r2, 0
00:00000018 FD18            	    86:    bne    read_bench_loop
00:0000001A 0400            	    87:    ei
00:0000001C 5A00            	    88:    rts
                            	    89: 
                            	    90: not_gpio_read_benchmark:
00:0000001E 206A            	    91:    cmp    r0, 2
00:00000020 8E18            	    92:    bne    not_mbox_write_benchmark
00:00000022 02E8A0860100    	    93:    mov    r2, 100000
00:00000028 01E8BC00007E    	    94:    mov    r1, GPU_DATA_BUFFER_5
00:0000002E 0360            	    95:    mov    r3, 0
                            	    96: write_bench_loop:
00:00000030 1309            	    97:    st     r3, (r1)  #write to mbox
00:00000032 1266            	    98:    sub    r2, 1
00:00000034 026A            	    99:    cmp    r2, 0
00:00000036 FD18            	   100:    bne    write_bench_loop
00:00000038 0400            	   101:    ei
00:0000003A 5A00            	   102:    rts
                            	   103: 
                            	   104: not_mbox_write_benchmark:
00:0000003C 04E83400207E    	   105:    mov    r4, GPLEV0
00:00000042 05E8A000007E    	   106:    mov    r5, GPU_COMMAND
00:00000048 06E8FC3F0000    	   107:    mov    r6, VIDEO_MASK
00:0000004E 07E8FF0F0000    	   108:    mov    r7, COMMAND_MASK
00:00000054 08E801000200    	   109:    mov    r8, DEFAULT_BIT_STATE
00:0000005A 0260            	   110:    mov    r2, 0
00:0000005C 5231            	   111:    st     r2, DATA_BUFFER_0_offset(r5)
00:0000005E 5232            	   112:    st     r2, DATA_BUFFER_1_offset(r5)
00:00000060 5233            	   113:    st     r2, DATA_BUFFER_2_offset(r5)
00:00000062 5235            	   114:    st     r2, DATA_BUFFER_3_offset(r5)
00:00000064 5236            	   115:    st     r2, DATA_BUFFER_4_offset(r5)
00:00000066 5237            	   116:    st     r2, DATA_BUFFER_5_offset(r5)
00:00000068 5234            	   117:    st     r2, GPU_SYNC_offset(r5)
                            	   118: 
                            	   119: wait_for_command:
00:0000006A 5221            	   120:    ld     r2, DATA_BUFFER_0_offset(r5)
00:0000006C F271            	   121:    bset   r2, FINAL_BIT
00:0000006E 5231            	   122:    st     r2, DATA_BUFFER_0_offset(r5)
00:00000070 5222            	   123:    ld     r2, DATA_BUFFER_1_offset(r5)
00:00000072 F271            	   124:    bset   r2, FINAL_BIT
00:00000074 5232            	   125:    st     r2, DATA_BUFFER_1_offset(r5)
00:00000076 5223            	   126:    ld     r2, DATA_BUFFER_2_offset(r5)
00:00000078 F271            	   127:    bset   r2, FINAL_BIT
00:0000007A 5233            	   128:    st     r2, DATA_BUFFER_2_offset(r5)
00:0000007C 5225            	   129:    ld     r2, DATA_BUFFER_3_offset(r5)
00:0000007E F271            	   130:    bset   r2, FINAL_BIT
00:00000080 5235            	   131:    st     r2, DATA_BUFFER_3_offset(r5)
00:00000082 5226            	   132:    ld     r2, DATA_BUFFER_4_offset(r5)
00:00000084 F271            	   133:    bset   r2, FINAL_BIT
00:00000086 5236            	   134:    st     r2, DATA_BUFFER_4_offset(r5)
00:00000088 5227            	   135:    ld     r2, DATA_BUFFER_5_offset(r5)
00:0000008A F271            	   136:    bset   r2, FINAL_BIT
00:0000008C 5237            	   137:    st     r2, DATA_BUFFER_5_offset(r5)
                            	   138: 
00:0000008E 0260            	   139:    mov    r2, 0
00:00000090 5230            	   140:    st     r2, GPU_COMMAND_offset(r5)    #set command register to 0
00:00000092 5234            	   141:    st     r2, GPU_SYNC_offset(r5)       #set sync register to 0
                            	   142: 
00:00000094 8240            	   143:    mov    r2, r8                        #set the default state of the control bits
                            	   144: 
                            	   145: wait_for_command_loop:
00:00000096 5320            	   146:    ld     r3, GPU_COMMAND_offset(r5)
00:00000098 036A            	   147:    cmp    r3, 0
00:0000009A 7E18            	   148:    beq    wait_for_command_loop
00:0000009C F36C            	   149:    btst   r3, 15                   #bit signals upper 16 bits is a sync command
00:0000009E 00906400        	   150:    beq    do_capture
00:000000A2 3140            	   151:    mov    r1, r3
00:000000A4 017B            	   152:    lsr    r1, 16
                            	   153: 
                            	   154:    #simple mode sync detection, enters with PSYNC_BIT set in r2
00:000000A6 016A            	   155:    cmp    r1, 0
00:000000A8 3918            	   156:    beq    edge_trail_neg
00:000000AA 116A            	   157:    cmp    r1, 1
00:000000AC 2718            	   158:    beq    edge_lead_neg
00:000000AE 1273            	   159:    bclr   r2, PSYNC_BIT             #only +ve edge (inverted later)
00:000000B0 216A            	   160:    cmp    r1, 2
00:000000B2 3418            	   161:    beq    edge_trail_pos
00:000000B4 316A            	   162:    cmp    r1, 3
00:000000B6 2218            	   163:    beq    edge_lead_pos
00:000000B8 416A            	   164:    cmp    r1, 4
00:000000BA 0E18            	   165:    beq    edge_trail_both
00:000000BC 516A            	   166:    cmp    r1, 5
00:000000BE D618            	   167:    bne    wait_for_command
                            	   168:    #if here then edge_lead_both
                            	   169: 
                            	   170: edge_lead_both:
                            	   171:    EDGE_DETECT
                            	     1M waitPSE1:
00:000000C0 4008            	     2M    ld     r0, (r4)
00:000000C2 2045            	     3M    eor    r0, r2
00:000000C4 106D            	     4M    btst   r0, PSYNC_BIT
00:000000C6 FD18            	     5M    bne    waitPSE1
00:000000C8 2045            	     6M    eor    r0, r2       #restore r0 value
00:000000CA 1275            	     7M    bchg   r2, PSYNC_BIT
00:000000CC 706D            	   172:    btst   r0, SYNC_BIT
00:000000CE F918            	   173:    bne    edge_lead_both
00:000000D0 5834            	   174:    st     r8, GPU_SYNC_offset(r5)   #lsbit flags sync detected
00:000000D2 009E4100        	   175:    b      done_simple_sync
                            	   176: 
                            	   177: edge_trail_both:
                            	   178:    EDGE_DETECT
                            	     1M waitPSE2:
00:000000D6 4008            	     2M    ld     r0, (r4)
00:000000D8 2045            	     3M    eor    r0, r2
00:000000DA 106D            	     4M    btst   r0, PSYNC_BIT
00:000000DC FD18            	     5M    bne    waitPSE2
00:000000DE 2045            	     6M    eor    r0, r2       #restore r0 value
00:000000E0 1275            	     7M    bchg   r2, PSYNC_BIT
00:000000E2 706D            	   179:    btst   r0, SYNC_BIT
00:000000E4 F918            	   180:    bne    edge_trail_both
00:000000E6 5834            	   181:    st     r8, GPU_SYNC_offset(r5)   #lsbit flags sync detected
                            	   182: edge_trail_both_hi:
                            	   183:    EDGE_DETECT
                            	     1M waitPSE3:
00:000000E8 4008            	     2M    ld     r0, (r4)
00:000000EA 2045            	     3M    eor    r0, r2
00:000000EC 106D            	     4M    btst   r0, PSYNC_BIT
00:000000EE FD18            	     5M    bne    waitPSE3
00:000000F0 2045            	     6M    eor    r0, r2       #restore r0 value
00:000000F2 1275            	     7M    bchg   r2, PSYNC_BIT
00:000000F4 706D            	   184:    btst   r0, SYNC_BIT
00:000000F6 7918            	   185:    beq    edge_trail_both_hi
00:000000F8 2E1F            	   186:    b      done_simple_sync
                            	   187: 
                            	   188: edge_lead_neg:
                            	   189: edge_lead_pos:
                            	   190:    #incoming psync state controls edge
                            	   191: wait_csync_lo2:
                            	   192:    EDGE_DETECT
                            	     1M waitPSE4:
00:000000FA 4008            	     2M    ld     r0, (r4)
00:000000FC 2045            	     3M    eor    r0, r2
00:000000FE 106D            	     4M    btst   r0, PSYNC_BIT
00:00000100 FD18            	     5M    bne    waitPSE4
00:00000102 2045            	     6M    eor    r0, r2       #restore r0 value
00:00000104 1275            	     7M    bchg   r2, PSYNC_BIT
                            	   193:    EDGE_DETECT
                            	     1M waitPSE5:
00:00000106 4008            	     2M    ld     r0, (r4)
00:00000108 2045            	     3M    eor    r0, r2
00:0000010A 106D            	     4M    btst   r0, PSYNC_BIT
00:0000010C FD18            	     5M    bne    waitPSE5
00:0000010E 2045            	     6M    eor    r0, r2       #restore r0 value
00:00000110 1275            	     7M    bchg   r2, PSYNC_BIT
00:00000112 706D            	   194:    btst   r0, SYNC_BIT
00:00000114 F318            	   195:    bne    wait_csync_lo2
00:00000116 5834            	   196:    st     r8, GPU_SYNC_offset(r5)   #lsbit flags sync detected
00:00000118 1E1F            	   197:    b      done_simple_sync
                            	   198: 
                            	   199: edge_trail_neg:
                            	   200: edge_trail_pos:
                            	   201:    #incoming psync state controls edge *** this one used by amiga
                            	   202: wait_csync_lo:
                            	   203:    EDGE_DETECT
                            	     1M waitPSE6:
00:0000011A 4008            	     2M    ld     r0, (r4)
00:0000011C 2045            	     3M    eor    r0, r2
00:0000011E 106D            	     4M    btst   r0, PSYNC_BIT
00:00000120 FD18            	     5M    bne    waitPSE6
00:00000122 2045            	     6M    eor    r0, r2       #restore r0 value
00:00000124 1275            	     7M    bchg   r2, PSYNC_BIT
                            	   204:    EDGE_DETECT
                            	     1M waitPSE7:
00:00000126 4008            	     2M    ld     r0, (r4)
00:00000128 2045            	     3M    eor    r0, r2
00:0000012A 106D            	     4M    btst   r0, PSYNC_BIT
00:0000012C FD18            	     5M    bne    waitPSE7
00:0000012E 2045            	     6M    eor    r0, r2       #restore r0 value
00:00000130 1275            	     7M    bchg   r2, PSYNC_BIT
00:00000132 706D            	   205:    btst   r0, SYNC_BIT
00:00000134 F318            	   206:    bne    wait_csync_lo
00:00000136 5834            	   207:    st     r8, GPU_SYNC_offset(r5)   #lsbit flags sync detected
                            	   208: wait_csync_hi:
                            	   209:    EDGE_DETECT
                            	     1M waitPSE8:
00:00000138 4008            	     2M    ld     r0, (r4)
00:0000013A 2045            	     3M    eor    r0, r2
00:0000013C 106D            	     4M    btst   r0, PSYNC_BIT
00:0000013E FD18            	     5M    bne    waitPSE8
00:00000140 2045            	     6M    eor    r0, r2       #restore r0 value
00:00000142 1275            	     7M    bchg   r2, PSYNC_BIT
                            	   210:    EDGE_DETECT
                            	     1M waitPSE9:
00:00000144 4008            	     2M    ld     r0, (r4)
00:00000146 2045            	     3M    eor    r0, r2
00:00000148 106D            	     4M    btst   r0, PSYNC_BIT
00:0000014A FD18            	     5M    bne    waitPSE9
00:0000014C 2045            	     6M    eor    r0, r2       #restore r0 value
00:0000014E 1275            	     7M    bchg   r2, PSYNC_BIT
00:00000150 706D            	   211:    btst   r0, SYNC_BIT
00:00000152 7318            	   212:    beq    wait_csync_hi
                            	   213: 
                            	   214: done_simple_sync:
00:00000154 126D            	   215:    btst   r2, PSYNC_BIT
00:00000156 8718            	   216:    bne    no_compensate_psync
                            	   217:    EDGE_DETECT           #have to compensate because capture hard coded to always start on same edge
                            	     1M waitPSE10:
00:00000158 4008            	     2M    ld     r0, (r4)
00:0000015A 2045            	     3M    eor    r0, r2
00:0000015C 106D            	     4M    btst   r0, PSYNC_BIT
00:0000015E FD18            	     5M    bne    waitPSE10
00:00000160 2045            	     6M    eor    r0, r2       #restore r0 value
00:00000162 1275            	     7M    bchg   r2, PSYNC_BIT
                            	   218: no_compensate_psync:
                            	   219: 
00:00000164 8240            	   220:    mov    r2, r8         #set the default state of the control bits
                            	   221: 
                            	   222: do_capture:
00:00000166 7347            	   223:    and    r3, r7         #mask off any command bits (max capture is 4095 psync cycles)
                            	   224: capture_loop:
                            	   225: 
                            	   226:    LO_PSYNC_CAPTURE
                            	     1M wait_psync_lo11:
00:00000168 4008            	     2M    ld     r0, (r4)
00:0000016A 106D            	     3M    btst   r0, PSYNC_BIT
00:0000016C FE18            	     4M    bne    wait_psync_lo11
00:0000016E 806D            	     5M    btst   r0, MUX_BIT
00:00000170 6047            	     6M    and    r0, r6
00:00000172 00C2CE00        	     7M    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:00000176 204D            	     8M    or     r0, r2           #merge bit state
00:00000178 1366            	     9M    sub    r3, 1
                            	   227:    HI_PSYNC_CAPTURE
                            	     1M wait_psync_hi12:
00:0000017A 4108            	     2M    ld     r1, (r4)
00:0000017C 116D            	     3M    btst   r1, PSYNC_BIT
00:0000017E 7E18            	     4M    beq    wait_psync_hi12
00:00000180 816D            	     5M    btst   r1, MUX_BIT
00:00000182 6147            	     6M    and    r1, r6
00:00000184 01C2CE08        	     7M    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:00000188 017D            	     8M    lsl    r1, 16           #merge lo and hi samples
00:0000018A 104D            	     9M    or     r0, r1
00:0000018C 036A            	    10M    cmp    r3, 0
                            	   228: 
00:0000018E 5031            	   229:    st     r0, DATA_BUFFER_0_offset(r5)
00:00000190 7F906DFF        	   230:    beq    wait_for_command
                            	   231: 
                            	   232:    LO_PSYNC_CAPTURE
                            	     1M wait_psync_lo13:
00:00000194 4008            	     2M    ld     r0, (r4)
00:00000196 106D            	     3M    btst   r0, PSYNC_BIT
00:00000198 FE18            	     4M    bne    wait_psync_lo13
00:0000019A 806D            	     5M    btst   r0, MUX_BIT
00:0000019C 6047            	     6M    and    r0, r6
00:0000019E 00C2CE00        	     7M    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:000001A2 204D            	     8M    or     r0, r2           #merge bit state
00:000001A4 1366            	     9M    sub    r3, 1
                            	   233:    HI_PSYNC_CAPTURE
                            	     1M wait_psync_hi14:
00:000001A6 4108            	     2M    ld     r1, (r4)
00:000001A8 116D            	     3M    btst   r1, PSYNC_BIT
00:000001AA 7E18            	     4M    beq    wait_psync_hi14
00:000001AC 816D            	     5M    btst   r1, MUX_BIT
00:000001AE 6147            	     6M    and    r1, r6
00:000001B0 01C2CE08        	     7M    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:000001B4 017D            	     8M    lsl    r1, 16           #merge lo and hi samples
00:000001B6 104D            	     9M    or     r0, r1
00:000001B8 036A            	    10M    cmp    r3, 0
                            	   234: 
00:000001BA 5032            	   235:    st     r0, DATA_BUFFER_1_offset(r5)
00:000001BC 7F9057FF        	   236:    beq    wait_for_command
                            	   237: 
                            	   238:    LO_PSYNC_CAPTURE
                            	     1M wait_psync_lo15:
00:000001C0 4008            	     2M    ld     r0, (r4)
00:000001C2 106D            	     3M    btst   r0, PSYNC_BIT
00:000001C4 FE18            	     4M    bne    wait_psync_lo15
00:000001C6 806D            	     5M    btst   r0, MUX_BIT
00:000001C8 6047            	     6M    and    r0, r6
00:000001CA 00C2CE00        	     7M    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:000001CE 204D            	     8M    or     r0, r2           #merge bit state
00:000001D0 1366            	     9M    sub    r3, 1
                            	   239:    HI_PSYNC_CAPTURE
                            	     1M wait_psync_hi16:
00:000001D2 4108            	     2M    ld     r1, (r4)
00:000001D4 116D            	     3M    btst   r1, PSYNC_BIT
00:000001D6 7E18            	     4M    beq    wait_psync_hi16
00:000001D8 816D            	     5M    btst   r1, MUX_BIT
00:000001DA 6147            	     6M    and    r1, r6
00:000001DC 01C2CE08        	     7M    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:000001E0 017D            	     8M    lsl    r1, 16           #merge lo and hi samples
00:000001E2 104D            	     9M    or     r0, r1
00:000001E4 036A            	    10M    cmp    r3, 0
                            	   240: 
00:000001E6 5033            	   241:    st     r0, DATA_BUFFER_2_offset(r5)
00:000001E8 7F9041FF        	   242:    beq    wait_for_command
                            	   243: 
                            	   244:    LO_PSYNC_CAPTURE
                            	     1M wait_psync_lo17:
00:000001EC 4008            	     2M    ld     r0, (r4)
00:000001EE 106D            	     3M    btst   r0, PSYNC_BIT
00:000001F0 FE18            	     4M    bne    wait_psync_lo17
00:000001F2 806D            	     5M    btst   r0, MUX_BIT
00:000001F4 6047            	     6M    and    r0, r6
00:000001F6 00C2CE00        	     7M    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:000001FA 204D            	     8M    or     r0, r2           #merge bit state
00:000001FC 1366            	     9M    sub    r3, 1
                            	   245:    HI_PSYNC_CAPTURE
                            	     1M wait_psync_hi18:
00:000001FE 4108            	     2M    ld     r1, (r4)
00:00000200 116D            	     3M    btst   r1, PSYNC_BIT
00:00000202 7E18            	     4M    beq    wait_psync_hi18
00:00000204 816D            	     5M    btst   r1, MUX_BIT
00:00000206 6147            	     6M    and    r1, r6
00:00000208 01C2CE08        	     7M    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:0000020C 017D            	     8M    lsl    r1, 16           #merge lo and hi samples
00:0000020E 104D            	     9M    or     r0, r1
00:00000210 036A            	    10M    cmp    r3, 0
                            	   246: 
00:00000212 5035            	   247:    st     r0, DATA_BUFFER_3_offset(r5)
00:00000214 7F902BFF        	   248:    beq    wait_for_command
                            	   249: 
                            	   250:    LO_PSYNC_CAPTURE
                            	     1M wait_psync_lo19:
00:00000218 4008            	     2M    ld     r0, (r4)
00:0000021A 106D            	     3M    btst   r0, PSYNC_BIT
00:0000021C FE18            	     4M    bne    wait_psync_lo19
00:0000021E 806D            	     5M    btst   r0, MUX_BIT
00:00000220 6047            	     6M    and    r0, r6
00:00000222 00C2CE00        	     7M    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:00000226 204D            	     8M    or     r0, r2           #merge bit state
00:00000228 1366            	     9M    sub    r3, 1
                            	   251:    HI_PSYNC_CAPTURE
                            	     1M wait_psync_hi20:
00:0000022A 4108            	     2M    ld     r1, (r4)
00:0000022C 116D            	     3M    btst   r1, PSYNC_BIT
00:0000022E 7E18            	     4M    beq    wait_psync_hi20
00:00000230 816D            	     5M    btst   r1, MUX_BIT
00:00000232 6147            	     6M    and    r1, r6
00:00000234 01C2CE08        	     7M    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:00000238 017D            	     8M    lsl    r1, 16           #merge lo and hi samples
00:0000023A 104D            	     9M    or     r0, r1
00:0000023C 036A            	    10M    cmp    r3, 0
                            	   252: 
00:0000023E 5036            	   253:    st     r0, DATA_BUFFER_4_offset(r5)
00:00000240 7F9015FF        	   254:    beq    wait_for_command
                            	   255: 
                            	   256:    LO_PSYNC_CAPTURE
                            	     1M wait_psync_lo21:
00:00000244 4008            	     2M    ld     r0, (r4)
00:00000246 106D            	     3M    btst   r0, PSYNC_BIT
00:00000248 FE18            	     4M    bne    wait_psync_lo21
00:0000024A 806D            	     5M    btst   r0, MUX_BIT
00:0000024C 6047            	     6M    and    r0, r6
00:0000024E 00C2CE00        	     7M    bsetne r0, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:00000252 204D            	     8M    or     r0, r2           #merge bit state
00:00000254 1366            	     9M    sub    r3, 1
00:00000256 1275            	   257:    bchg   r2, PSYNC_BIT        #invert the software psync bit every 12 samples / 6 words
                            	   258:    HI_PSYNC_CAPTURE
                            	     1M wait_psync_hi22:
00:00000258 4108            	     2M    ld     r1, (r4)
00:0000025A 116D            	     3M    btst   r1, PSYNC_BIT
00:0000025C 7E18            	     4M    beq    wait_psync_hi22
00:0000025E 816D            	     5M    btst   r1, MUX_BIT
00:00000260 6147            	     6M    and    r1, r6
00:00000262 01C2CE08        	     7M    bsetne r1, ALT_MUX_BIT  #move mux bit to position in 16 bit sample
00:00000266 017D            	     8M    lsl    r1, 16           #merge lo and hi samples
00:00000268 104D            	     9M    or     r0, r1
00:0000026A 036A            	    10M    cmp    r3, 0
                            	   259: 
00:0000026C 5037            	   260:    st     r0, DATA_BUFFER_5_offset(r5)
00:0000026E 7F90FEFE        	   261:    beq    wait_for_command
                            	   262: 
00:00000272 7F9E7BFF        	   263:    b      capture_loop
                            	   264: 


Symbols by name:
ALT_MUX_BIT                      S:0000000E
COMMAND_MASK                     S:00000FFF
DATA_BUFFER_0_offset             S:00000004
DATA_BUFFER_1_offset             S:00000008
DATA_BUFFER_2_offset             S:0000000C
DATA_BUFFER_3_offset             S:00000014
DATA_BUFFER_4_offset             S:00000018
DATA_BUFFER_5_offset             S:0000001C
DEFAULT_BIT_STATE                S:00020001
FINAL_BIT                        S:0000001F
GPLEV0                           S:7E200034
GPU_COMMAND                      S:7E0000A0
GPU_COMMAND_offset               S:00000000
GPU_DATA_BUFFER_5                S:7E0000BC
GPU_SYNC_offset                  S:00000010
MUX_BIT                          S:00000018
PSYNC_BIT                        S:00000011
SYNC_BIT                         S:00000017
VIDEO_MASK                       S:00003FFC
capture_loop                    00:00000168
do_capture                      00:00000166
done_simple_sync                00:00000154
edge_lead_both                  00:000000C0
edge_lead_neg                   00:000000FA
edge_lead_pos                   00:000000FA
edge_trail_both                 00:000000D6
edge_trail_both_hi              00:000000E8
edge_trail_neg                  00:0000011A
edge_trail_pos                  00:0000011A
no_compensate_psync             00:00000164
not_gpio_read_benchmark         00:0000001E
not_mbox_write_benchmark        00:0000003C
read_bench_loop                 00:00000012
waitPSE1                        00:000000C0
waitPSE10                       00:00000158
waitPSE2                        00:000000D6
waitPSE3                        00:000000E8
waitPSE4                        00:000000FA
waitPSE5                        00:00000106
waitPSE6                        00:0000011A
waitPSE7                        00:00000126
waitPSE8                        00:00000138
waitPSE9                        00:00000144
wait_csync_hi                   00:00000138
wait_csync_lo                   00:0000011A
wait_csync_lo2                  00:000000FA
wait_for_command                00:0000006A
wait_for_command_loop           00:00000096
wait_psync_hi12                 00:0000017A
wait_psync_hi14                 00:000001A6
wait_psync_hi16                 00:000001D2
wait_psync_hi18                 00:000001FE
wait_psync_hi20                 00:0000022A
wait_psync_hi22                 00:00000258
wait_psync_lo11                 00:00000168
wait_psync_lo13                 00:00000194
wait_psync_lo15                 00:000001C0
wait_psync_lo17                 00:000001EC
wait_psync_lo19                 00:00000218
wait_psync_lo21                 00:00000244
write_bench_loop                00:00000030

Symbols by value:
00000000 GPU_COMMAND_offset
00000004 DATA_BUFFER_0_offset
00000008 DATA_BUFFER_1_offset
0000000C DATA_BUFFER_2_offset
0000000E ALT_MUX_BIT
00000010 GPU_SYNC_offset
00000011 PSYNC_BIT
00000012 read_bench_loop
00000014 DATA_BUFFER_3_offset
00000017 SYNC_BIT
00000018 DATA_BUFFER_4_offset
00000018 MUX_BIT
0000001C DATA_BUFFER_5_offset
0000001E not_gpio_read_benchmark
0000001F FINAL_BIT
00000030 write_bench_loop
0000003C not_mbox_write_benchmark
0000006A wait_for_command
00000096 wait_for_command_loop
000000C0 edge_lead_both
000000C0 waitPSE1
000000D6 edge_trail_both
000000D6 waitPSE2
000000E8 edge_trail_both_hi
000000E8 waitPSE3
000000FA edge_lead_neg
000000FA edge_lead_pos
000000FA waitPSE4
000000FA wait_csync_lo2
00000106 waitPSE5
0000011A edge_trail_neg
0000011A edge_trail_pos
0000011A waitPSE6
0000011A wait_csync_lo
00000126 waitPSE7
00000138 waitPSE8
00000138 wait_csync_hi
00000144 waitPSE9
00000154 done_simple_sync
00000158 waitPSE10
00000164 no_compensate_psync
00000166 do_capture
00000168 capture_loop
00000168 wait_psync_lo11
0000017A wait_psync_hi12
00000194 wait_psync_lo13
000001A6 wait_psync_hi14
000001C0 wait_psync_lo15
000001D2 wait_psync_hi16
000001EC wait_psync_lo17
000001FE wait_psync_hi18
00000218 wait_psync_lo19
0000022A wait_psync_hi20
00000244 wait_psync_lo21
00000258 wait_psync_hi22
00000FFF COMMAND_MASK
00003FFC VIDEO_MASK
00020001 DEFAULT_BIT_STATE
7E0000A0 GPU_COMMAND
7E0000BC GPU_DATA_BUFFER_5
7E200034 GPLEV0
